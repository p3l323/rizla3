//// Gramática del fichero de gramática
//// Conjunto de símbolos terminales
Terminales = { lambda var tipo id = -= ( ) cons op + == & , function { } tipo return if for ; }

//// Conjunto de símbolo no terminales
NoTerminales = { Axioma S Declaracion Asignacion Operacion IO Funcion Condicional For SF SI X A1 Term ListaParam A1 Cadena C1 Operacion1 Op ListaParam1 ListaParam Funcion F2 ListaParamTipo F1 ListaParamTipo1 ListaParamTipo }

//// Axioma
Axioma = S
//// Lista de producciones
Producciones = {

Cadena -> cons C1
C1 -> lambda
C1 -> op id C1
C1 -> op cons C1

Declaracion -> var tipo id S

Asignacion -> id X
X -> = id C1 S
X -> = cons C1 S
X -> -= id S
X -> -= cons S
X -> ( ListaParam ) S



Operacion1 -> Op id Operacion1
Operacion1 -> Op cons Operacion1
Operacion1 -> S
Operacion -> id Op id Operacion1
Operacion -> id Op cons Operacion1
Operacion -> cons Op id Operacion1
Operacion -> cons Op cons Operacion1
Op -> +
Op -> ==
Op -> &&


IO -> opIO ( id C1) S
IO -> opIO ( cons C1) S


ListaParam1 -> , id C1 ListaParam1
ListaParam1 -> , cons C1 ListaParam1
ListaParam1 -> lambda
ListaParam -> id C1 ListaParam1
ListaParam -> cons C1 ListaParam1

ListaParamTipo1 -> , tipo id ListaParamTipo1
ListaParamTipo1 -> lambda
ListaParamTipo -> tipo id ListaParamTipo1


For -> for ( Asignacion ; Operacion ; Asignacion) { SF }





Funcion -> function F2
F2 -> id ( ListaParamTipo ) { SF }
F2 -> tipo id ( ListaParamTipo ) { SF return F1
F1 -> id C1 }
F1 -> cons C1 }


DeclaracionSF -> var tipo id SF

AsignacionSF -> id XSF
XSF -> = id C1 SF
XSF -> = cons C1 SF
XSF -> -= id SF
XSF -> -= cons SF
XSF -> ( ListaParam ) SF

IOSF -> opIO ( id C1 ) SF
IOSF -> opIO ( cons C1 ) SF


CondicionalSF -> if ( Operacion ) var tipo id SF
CondicionalSF -> if ( Operacion ) AsignacionSISF
CondicionalSF -> if ( Operacion ) IOSISF

ForSF -> for ( Asignacion ; Operacion ; Asignacion) { SF } SF

AsignacionSISF -> id XSISF
XSISF -> = id C1 SF
XSISF -> = cons C1 SF
XSISF -> -= id SF
XSISF -> -= cons SF
XSISF -> ( ListaParam ) SF

IOSISF -> opIO ( id C1 ) SF
IOSISF -> opIO ( cons C1 ) SF


Condicional -> if ( Operacion ) var tipo id
Condicional -> if ( Operacion ) AsignacionSI
Condicional -> if ( Operacion ) IOSI


AsignacionSI -> id XSI
XSI -> = id C1 S
XSI -> = cons C1 S
XSI -> -= id S
XSI -> -= cons S
XSI -> ( ListaParam ) S

IOSI -> opIO ( id ) S
IOSI -> opIO ( cons ) S





}

