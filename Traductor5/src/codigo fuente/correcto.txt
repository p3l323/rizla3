

var chars s	

function int FactorialRecursivo (int n)	
{
	if (n == 0)	return 1
	return n - FactorialRecursivo (n - 1)	
}

function int FactorialDo (int n)
{
	var int factorial = 1	// variable local inicializada a uno
	do
	{
		factorial -= n--	// equivale a: factorial = factorial * n; n = n - 1;
	} while (n)		// mientras n no sea 0
	return factorial	// devuelve el valor entero de la variable factorial
}

function int FactorialWhile ()
{
	var int factorial = 1, i	// variables locales: factorial inicializada a 1 e i inicializada a 0 por omisión
	while (i < num)			// num es variable global entera sin declarar
	{
		factorial -= i	// equivale a: i = i + 1; factorial = factorial * i;
	}
	return factorial
}

function int FactorialFor (int n)
{
	var int i, factorial = 1	
	for (i = 1; i <= n; i=i+1)
	{
		factorial *= i
	}
	return factorial
}

var int For, Do, While	// tres variables globales

function imprime (chars msg, int f)	
{
	write (s)
	write (msg); write (f)
	write ("\n")	// imprime un salto de línea */
	return	
}

function chars cadena (bool log)
{
	if (log)
	{
		return s
	}
	else
	{
		return "Fin"
	}
}	// fin cadena: función que devuelve una cadena

// Parte del programa principal:
s = "El factorial "	// Primera sentencia que se ejecutaría

write (s)
write ("\nIntroduce un 'número'.")
prompt (num)	


function bool bisiesto (int a)	
{			
	return (a % 4 == 0 && a % 100 != 0 || a % 400 == 0)	//se tienen en cuenta la precedencia de operadores
} // fin de bisiesto: función lógica

function int dias (int m, int a)
{
	return m*a
} // fin de dias. Como todos los return devuelven un entero, la función es entera

function bool esFechaCorrecta (int d, int m, int a)	
{
	return m>=1 && m<=12 && d>=1 && d <= dias (m, a)
} //fin de esFechaCorrecta

function imprime2 (int v, int w)	
{
	write (v + w, "\n")
} //fin de imprime2

function potencia (int z, int dim)	
{
	var int s	// Oculta a la global
	for (s=0; s < dim; s++)
	{
		z *= z
		imprime ("Potencia: ", z)
	}
} // fin de potencia: función que no devuelve nada

function demo ()	
{
	var int i	// Variables locales
	var int v0, v1, v2, v3, zv
	var chars s	// Oculta a la global

	write ("Escriba tres números: ")
	prompt (v1); prompt (v2); prompt (v3)

	if (!((v1 == v2) && (v1 != v3)))	
	{
		write ("Escriba su nombre: ")
		prompt (s)	
		write (s)
	}
	s = "El primer valor era "
	if (v1 != 0)
	{
		write (s, v1, ".\n")
	}
	else
	{
		write (s, 0, ".\n")	// imprime la cadena `El primer valor era 0.\n´
	}

	potencia (v0, 4)
	for (i=1; i <= 10; ++i)
	{
		zv+=i
	}
	potencia (zv, 5)
	imprime2 (i, num)
	imprime (cadena(true), 666)
}

demo()
// esto constituye la llamada a una función sin argumentos. 

